import { PDFDocument, rgb, StandardFonts } from 'pdf-lib';
import { saveAs } from 'file-saver';
import JSZip from 'jszip';

export const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

export const createSampleWordDocument = (originalFileName: string): Blob => {
  const content = `
CONVERTED DOCUMENT
==================

Original File: ${originalFileName}
Conversion Date: ${new Date().toLocaleDateString()}
Conversion Time: ${new Date().toLocaleTimeString()}

This is a sample converted Word document. In a real implementation, this would contain:

1. EXTRACTED TEXT CONTENT
   - All text from the original PDF
   - Preserved formatting where possible
   - Tables and lists maintained

2. DOCUMENT STRUCTURE
   - Headings and subheadings
   - Paragraph formatting
   - Font styles and sizes

3. ADDITIONAL ELEMENTS
   - Images (where extractable)
   - Tables and charts
   - Headers and footers

CONVERSION NOTES:
- Text extraction completed successfully
- Formatting preserved to the best extent possible
- Images may require manual adjustment
- Review document for accuracy

This sample demonstrates the conversion process. The actual implementation would use advanced PDF parsing libraries to extract and convert the real content from your PDF files.

Generated by ConvertPro - Professional Document Conversion Tools
  `;

  return new Blob([content], { 
    type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' 
  });
};

export const createSamplePDF = async (title: string, content: string): Promise<Uint8Array> => {
  const pdfDoc = await PDFDocument.create();
  const page = pdfDoc.addPage([612, 792]); // Standard letter size
  
  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
  const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
  
  const { width, height } = page.getSize();
  const margin = 50;
  
  // Title
  page.drawText(title, {
    x: margin,
    y: height - margin - 20,
    size: 24,
    font: boldFont,
    color: rgb(0.1, 0.1, 0.1),
  });
  
  // Date
  page.drawText(`Generated: ${new Date().toLocaleDateString()}`, {
    x: margin,
    y: height - margin - 50,
    size: 12,
    font: font,
    color: rgb(0.4, 0.4, 0.4),
  });
  
  // Content
  const lines = content.split('\n');
  let yPosition = height - margin - 90;
  
  lines.forEach((line) => {
    if (yPosition < margin + 20) {
      // Add new page if needed
      const newPage = pdfDoc.addPage([612, 792]);
      yPosition = height - margin - 20;
      
      newPage.drawText(line, {
        x: margin,
        y: yPosition,
        size: 11,
        font: font,
        color: rgb(0.2, 0.2, 0.2),
      });
    } else {
      page.drawText(line, {
        x: margin,
        y: yPosition,
        size: 11,
        font: font,
        color: rgb(0.2, 0.2, 0.2),
      });
    }
    yPosition -= 18;
  });
  
  return await pdfDoc.save();
};

export const createZipFile = async (files: { name: string; content: string | Uint8Array }[]): Promise<Blob> => {
  const zip = new JSZip();
  
  files.forEach((file) => {
    zip.file(file.name, file.content);
  });
  
  return await zip.generateAsync({ type: 'blob' });
};

export const extractTextFromPDF = (fileName: string): string => {
  return `
EXTRACTED TEXT FROM: ${fileName}
==================================

This is sample extracted text content. In a real implementation, this would contain:

DOCUMENT CONTENT:
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor 
incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis 
nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.

CHAPTER 1: INTRODUCTION
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore 
eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, 
sunt in culpa qui officia deserunt mollit anim id est laborum.

CHAPTER 2: METHODOLOGY
Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium 
doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore 
veritatis et quasi architecto beatae vitae dicta sunt explicabo.

TABLES AND DATA:
| Item | Quantity | Price |
|------|----------|-------|
| A    | 10       | $5.00 |
| B    | 5        | $3.50 |
| C    | 8        | $7.25 |

CONCLUSION:
Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, 
sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.

---
Extracted on: ${new Date().toLocaleString()}
Total characters: ${Math.floor(Math.random() * 5000) + 2000}
Total words: ${Math.floor(Math.random() * 800) + 300}
Pages processed: ${Math.floor(Math.random() * 10) + 1}
  `;
};